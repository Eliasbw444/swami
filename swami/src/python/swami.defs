;; -*- scheme -*-
; object definitions ...
(define-object Lock
  (in-module "Swami")
  (parent "GObject")
  (c-name "SwamiLock")
  (gtype-id "SWAMI_TYPE_LOCK")
)

(define-object ControlQueue
  (in-module "Swami")
  (parent "SwamiLock")
  (c-name "SwamiControlQueue")
  (gtype-id "SWAMI_TYPE_CONTROL_QUEUE")
)

(define-object Control
  (in-module "Swami")
  (parent "SwamiLock")
  (c-name "SwamiControl")
  (gtype-id "SWAMI_TYPE_CONTROL")
)

(define-object ControlValue
  (in-module "Swami")
  (parent "SwamiControl")
  (c-name "SwamiControlValue")
  (gtype-id "SWAMI_TYPE_CONTROL_VALUE")
)

(define-object ControlProp
  (in-module "Swami")
  (parent "SwamiControl")
  (c-name "SwamiControlProp")
  (gtype-id "SWAMI_TYPE_CONTROL_PROP")
)

(define-object ControlHub
  (in-module "Swami")
  (parent "SwamiControl")
  (c-name "SwamiControlHub")
  (gtype-id "SWAMI_TYPE_CONTROL_HUB")
)

(define-object ControlFunc
  (in-module "Swami")
  (parent "SwamiControl")
  (c-name "SwamiControlFunc")
  (gtype-id "SWAMI_TYPE_CONTROL_FUNC")
)

(define-object ControlMidi
  (in-module "Swami")
  (parent "SwamiControlFunc")
  (c-name "SwamiControlMidi")
  (gtype-id "SWAMI_TYPE_CONTROL_MIDI")
)

(define-object MidiDevice
  (in-module "Swami")
  (parent "SwamiLock")
  (c-name "SwamiMidiDevice")
  (gtype-id "SWAMI_TYPE_MIDI_DEVICE")
)

(define-object Plugin
  (in-module "Swami")
  (parent "GTypeModule")
  (c-name "SwamiPlugin")
  (gtype-id "SWAMI_TYPE_PLUGIN")
)

(define-object PropTree
  (in-module "Swami")
  (parent "SwamiLock")
  (c-name "SwamiPropTree")
  (gtype-id "SWAMI_TYPE_PROP_TREE")
)

(define-object Root
  (in-module "Swami")
  (parent "SwamiLock")
  (c-name "SwamiRoot")
  (gtype-id "SWAMI_TYPE_ROOT")
)

(define-object Wavetbl
  (in-module "Swami")
  (parent "SwamiLock")
  (c-name "SwamiWavetbl")
  (gtype-id "SWAMI_TYPE_WAVETBL")
)

;; Enumerations and flags ...

(define-flags ControlFlags
  (in-module "Swami")
  (c-name "SwamiControlFlags")
  (gtype-id "SWAMI_TYPE_CONTROL_FLAGS")
  (values
    '("sends" "SWAMI_CONTROL_SENDS")
    '("recvs" "SWAMI_CONTROL_RECVS")
    '("no-conv" "SWAMI_CONTROL_NO_CONV")
    '("native" "SWAMI_CONTROL_NATIVE")
    '("value" "SWAMI_CONTROL_VALUE")
    '("spec-no-conv" "SWAMI_CONTROL_SPEC_NO_CONV")
  )
)

(define-enum ControlConnPriority
  (in-module "Swami")
  (c-name "SwamiControlConnPriority")
  (gtype-id "SWAMI_TYPE_CONTROL_CONN_PRIORITY")
  (values
    '("default" "SWAMI_CONTROL_CONN_PRIORITY_DEFAULT")
    '("low" "SWAMI_CONTROL_CONN_PRIORITY_LOW")
    '("medium" "SWAMI_CONTROL_CONN_PRIORITY_MEDIUM")
    '("high" "SWAMI_CONTROL_CONN_PRIORITY_HIGH")
  )
)

(define-flags ControlConnFlags
  (in-module "Swami")
  (c-name "SwamiControlConnFlags")
  (gtype-id "SWAMI_TYPE_CONTROL_CONN_FLAGS")
  (values
    '("input" "SWAMI_CONTROL_CONN_INPUT")
    '("output" "SWAMI_CONTROL_CONN_OUTPUT")
    '("init" "SWAMI_CONTROL_CONN_INIT")
    '("bidir" "SWAMI_CONTROL_CONN_BIDIR")
    '("spec" "SWAMI_CONTROL_CONN_SPEC")
  )
)

(define-enum Error
  (in-module "Swami")
  (c-name "SwamiError")
  (gtype-id "SWAMI_TYPE_ERROR")
  (values
    '("fail" "SWAMI_ERROR_FAIL")
    '("invalid" "SWAMI_ERROR_INVALID")
    '("canceled" "SWAMI_ERROR_CANCELED")
    '("unsupported" "SWAMI_ERROR_UNSUPPORTED")
    '("io" "SWAMI_ERROR_IO")
  )
)

(define-enum MidiEventType
  (in-module "Swami")
  (c-name "SwamiMidiEventType")
  (gtype-id "SWAMI_TYPE_MIDI_EVENT_TYPE")
  (values
    '("none" "SWAMI_MIDI_NONE")
    '("note" "SWAMI_MIDI_NOTE")
    '("note-on" "SWAMI_MIDI_NOTE_ON")
    '("note-off" "SWAMI_MIDI_NOTE_OFF")
    '("key-pressure" "SWAMI_MIDI_KEY_PRESSURE")
    '("pitch-bend" "SWAMI_MIDI_PITCH_BEND")
    '("program-change" "SWAMI_MIDI_PROGRAM_CHANGE")
    '("control" "SWAMI_MIDI_CONTROL")
    '("control14" "SWAMI_MIDI_CONTROL14")
    '("chan-pressure" "SWAMI_MIDI_CHAN_PRESSURE")
    '("rpn" "SWAMI_MIDI_RPN")
    '("nrpn" "SWAMI_MIDI_NRPN")
    '("bend-range" "SWAMI_MIDI_BEND_RANGE")
    '("bank-select" "SWAMI_MIDI_BANK_SELECT")
  )
)

(define-enum Rank
  (in-module "Swami")
  (c-name "SwamiRank")
  (gtype-id "SWAMI_TYPE_RANK")
  (values
    '("invalid" "SWAMI_RANK_INVALID")
    '("lowest" "SWAMI_RANK_LOWEST")
    '("low" "SWAMI_RANK_LOW")
    '("normal" "SWAMI_RANK_NORMAL")
    '("default" "SWAMI_RANK_DEFAULT")
    '("high" "SWAMI_RANK_HIGH")
    '("highest" "SWAMI_RANK_HIGHEST")
  )
)

(define-flags ObjectFlags
  (in-module "Swami")
  (c-name "SwamiObjectFlags")
  (gtype-id "SWAMI_TYPE_OBJECT_FLAGS")
  (values
    '("save" "SWAMI_OBJECT_SAVE")
    '("user" "SWAMI_OBJECT_USER")
  )
)


;; From SwamiControl.h

(define-function swami_control_get_type
  (c-name "swami_control_get_type")
  (return-type "GType")
)

(define-function swami_control_new
  (c-name "swami_control_new")
  (is-constructor-of "SwamiControl")
  (return-type "SwamiControl*")
)

(define-method connect
  (of-object "SwamiControl")
  (c-name "swami_control_connect")
  (return-type "none")
  (parameters
    '("SwamiControl*" "dest")
    '("guint" "flags")
  )
)

(define-method connect_transform
  (of-object "SwamiControl")
  (c-name "swami_control_connect_transform")
  (return-type "none")
  (parameters
    '("SwamiControl*" "dest")
    '("guint" "flags")
    '("SwamiValueTransform" "trans1")
    '("SwamiValueTransform" "trans2")
    '("gpointer" "data1")
    '("gpointer" "data2")
    '("GDestroyNotify" "destroy1")
    '("GDestroyNotify" "destroy2")
  )
)

(define-method connect_item_prop
  (of-object "SwamiControl")
  (c-name "swami_control_connect_item_prop")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("GParamSpec*" "pspec")
  )
)

(define-method disconnect
  (of-object "SwamiControl")
  (c-name "swami_control_disconnect")
  (return-type "none")
  (parameters
    '("SwamiControl*" "dest")
  )
)

(define-method disconnect_all
  (of-object "SwamiControl")
  (c-name "swami_control_disconnect_all")
  (return-type "none")
)

(define-method disconnect_unref
  (of-object "SwamiControl")
  (c-name "swami_control_disconnect_unref")
  (return-type "none")
)

(define-method get_connections
  (of-object "SwamiControl")
  (c-name "swami_control_get_connections")
  (return-type "IpatchList*")
  (parameters
    '("SwamiControlConnFlags" "dir")
  )
)

(define-method set_transform
  (of-object "SwamiControl")
  (c-name "swami_control_set_transform")
  (return-type "none")
  (parameters
    '("SwamiControl*" "dest")
    '("SwamiValueTransform" "trans")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method get_transform
  (of-object "SwamiControl")
  (c-name "swami_control_get_transform")
  (return-type "none")
  (parameters
    '("SwamiControl*" "dest")
    '("SwamiValueTransform*" "trans")
  )
)

(define-method set_flags
  (of-object "SwamiControl")
  (c-name "swami_control_set_flags")
  (return-type "none")
  (parameters
    '("int" "flags")
  )
)

(define-method get_flags
  (of-object "SwamiControl")
  (c-name "swami_control_get_flags")
  (return-type "int")
)

(define-method set_queue
  (of-object "SwamiControl")
  (c-name "swami_control_set_queue")
  (return-type "none")
  (parameters
    '("SwamiControlQueue*" "queue")
  )
)

(define-method get_queue
  (of-object "SwamiControl")
  (c-name "swami_control_get_queue")
  (return-type "SwamiControlQueue*")
)

(define-method get_spec
  (of-object "SwamiControl")
  (c-name "swami_control_get_spec")
  (return-type "GParamSpec*")
)

(define-method set_spec
  (of-object "SwamiControl")
  (c-name "swami_control_set_spec")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
  )
)

(define-method sync_spec
  (of-object "SwamiControl")
  (c-name "swami_control_sync_spec")
  (return-type "gboolean")
  (parameters
    '("SwamiControl*" "source")
    '("SwamiValueTransform" "trans")
    '("gpointer" "data")
  )
)

(define-method transform_spec
  (of-object "SwamiControl")
  (c-name "swami_control_transform_spec")
  (return-type "GParamSpec*")
  (parameters
    '("SwamiControl*" "source")
    '("SwamiValueTransform" "trans")
    '("gpointer" "data")
  )
)

(define-method set_value_type
  (of-object "SwamiControl")
  (c-name "swami_control_set_value_type")
  (return-type "none")
  (parameters
    '("GType" "type")
  )
)

(define-method get_value
  (of-object "SwamiControl")
  (c-name "swami_control_get_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method get_value_native
  (of-object "SwamiControl")
  (c-name "swami_control_get_value_native")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method set_value
  (of-object "SwamiControl")
  (c-name "swami_control_set_value")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method set_value_no_queue
  (of-object "SwamiControl")
  (c-name "swami_control_set_value_no_queue")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method set_event
  (of-object "SwamiControl")
  (c-name "swami_control_set_event")
  (return-type "none")
  (parameters
    '("SwamiControlEvent*" "event")
  )
)

(define-method set_event_no_queue
  (of-object "SwamiControl")
  (c-name "swami_control_set_event_no_queue")
  (return-type "none")
  (parameters
    '("SwamiControlEvent*" "event")
  )
)

(define-method set_event_no_queue_loop
  (of-object "SwamiControl")
  (c-name "swami_control_set_event_no_queue_loop")
  (return-type "none")
  (parameters
    '("SwamiControlEvent*" "event")
  )
)

(define-method transmit_value
  (of-object "SwamiControl")
  (c-name "swami_control_transmit_value")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method transmit_event
  (of-object "SwamiControl")
  (c-name "swami_control_transmit_event")
  (return-type "none")
  (parameters
    '("SwamiControlEvent*" "event")
  )
)

(define-method transmit_event_loop
  (of-object "SwamiControl")
  (c-name "swami_control_transmit_event_loop")
  (return-type "none")
  (parameters
    '("SwamiControlEvent*" "event")
  )
)

(define-function swami_control_do_event_expiration
  (c-name "swami_control_do_event_expiration")
  (return-type "none")
)

(define-method new_event
  (of-object "SwamiControl")
  (c-name "swami_control_new_event")
  (return-type "SwamiControlEvent*")
  (parameters
    '("SwamiControlEvent*" "origin")
    '("const-GValue*" "value")
  )
)



;; From SwamiEvent_ipatch.h

(define-function swami_event_item_add_get_type
  (c-name "swami_event_item_add_get_type")
  (return-type "GType")
)

(define-function swami_event_item_remove_get_type
  (c-name "swami_event_item_remove_get_type")
  (return-type "GType")
)

(define-function swami_event_prop_change_get_type
  (c-name "swami_event_prop_change_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "SwamiEventItemAdd")
  (c-name "swami_event_item_add_copy")
  (return-type "SwamiEventItemAdd*")
)

(define-method free
  (of-object "SwamiEventItemAdd")
  (c-name "swami_event_item_add_free")
  (return-type "none")
)

(define-function swami_event_item_remove_new
  (c-name "swami_event_item_remove_new")
  (is-constructor-of "SwamiEventItemRemove")
  (return-type "SwamiEventItemRemove*")
)

(define-method copy
  (of-object "SwamiEventItemRemove")
  (c-name "swami_event_item_remove_copy")
  (return-type "SwamiEventItemRemove*")
)

(define-method free
  (of-object "SwamiEventItemRemove")
  (c-name "swami_event_item_remove_free")
  (return-type "none")
)

(define-function swami_event_prop_change_new
  (c-name "swami_event_prop_change_new")
  (is-constructor-of "SwamiEventPropChange")
  (return-type "SwamiEventPropChange*")
)

(define-method copy
  (of-object "SwamiEventPropChange")
  (c-name "swami_event_prop_change_copy")
  (return-type "SwamiEventPropChange*")
)

(define-method free
  (of-object "SwamiEventPropChange")
  (c-name "swami_event_prop_change_free")
  (return-type "none")
)



;; From SwamiControlEvent.h

(define-function swami_control_event_get_type
  (c-name "swami_control_event_get_type")
  (return-type "GType")
)

(define-function swami_control_event_new
  (c-name "swami_control_event_new")
  (is-constructor-of "SwamiControlEvent")
  (return-type "SwamiControlEvent*")
  (parameters
    '("gboolean" "stamp")
  )
)

(define-method free
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_free")
  (return-type "none")
)

(define-method duplicate
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_duplicate")
  (return-type "SwamiControlEvent*")
)

(define-method transform
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_transform")
  (return-type "SwamiControlEvent*")
  (parameters
    '("GType" "valtype")
    '("SwamiValueTransform" "trans")
    '("gpointer" "data")
  )
)

(define-method stamp
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_stamp")
  (return-type "none")
)

(define-method set_origin
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_set_origin")
  (return-type "none")
  (parameters
    '("SwamiControlEvent*" "origin")
  )
)

(define-method ref
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_ref")
  (return-type "SwamiControlEvent*")
)

(define-method unref
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_unref")
  (return-type "none")
)

(define-method active_ref
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_active_ref")
  (return-type "none")
)

(define-method active_unref
  (of-object "SwamiControlEvent")
  (c-name "swami_control_event_active_unref")
  (return-type "none")
)



;; From SwamiControlFunc.h

(define-function swami_control_func_get_type
  (c-name "swami_control_func_get_type")
  (return-type "GType")
)

(define-function swami_control_func_new
  (c-name "swami_control_func_new")
  (is-constructor-of "SwamiControlFunc")
  (return-type "SwamiControlFunc*")
)

(define-method assign_funcs
  (of-object "SwamiControlFunc")
  (c-name "swami_control_func_assign_funcs")
  (return-type "none")
  (parameters
    '("SwamiControlGetValueFunc" "get_func")
    '("SwamiControlSetValueFunc" "set_func")
    '("SwamiControlFuncDestroy" "destroy_func")
    '("gpointer" "user_data")
  )
)



;; From SwamiControlHub.h

(define-function swami_control_hub_get_type
  (c-name "swami_control_hub_get_type")
  (return-type "GType")
)

(define-function swami_control_hub_new
  (c-name "swami_control_hub_new")
  (is-constructor-of "SwamiControlHub")
  (return-type "SwamiControlHub*")
)



;; From SwamiControlMidi.h

(define-function swami_control_midi_get_type
  (c-name "swami_control_midi_get_type")
  (return-type "GType")
)

(define-function swami_control_midi_new
  (c-name "swami_control_midi_new")
  (is-constructor-of "SwamiControlMidi")
  (return-type "SwamiControlMidi*")
)

(define-method set_callback
  (of-object "SwamiControlMidi")
  (c-name "swami_control_midi_set_callback")
  (return-type "none")
  (parameters
    '("SwamiControlSetValueFunc" "callback")
    '("gpointer" "data")
  )
)

(define-method send
  (of-object "SwamiControlMidi")
  (c-name "swami_control_midi_send")
  (return-type "none")
  (parameters
    '("SwamiMidiEventType" "type")
    '("int" "channel")
    '("int" "param1")
    '("int" "param2")
  )
)

(define-method transmit
  (of-object "SwamiControlMidi")
  (c-name "swami_control_midi_transmit")
  (return-type "none")
  (parameters
    '("SwamiMidiEventType" "type")
    '("int" "channel")
    '("int" "param1")
    '("int" "param2")
  )
)



;; From SwamiControlProp.h

(define-function swami_get_control_prop
  (c-name "swami_get_control_prop")
  (return-type "SwamiControl*")
  (parameters
    '("GObject*" "object")
    '("GParamSpec*" "pspec")
  )
)

(define-function swami_get_control_prop_by_name
  (c-name "swami_get_control_prop_by_name")
  (return-type "SwamiControl*")
  (parameters
    '("GObject*" "object")
    '("const-char*" "name")
  )
)

(define-function swami_control_prop_connect_objects
  (c-name "swami_control_prop_connect_objects")
  (return-type "none")
  (parameters
    '("GObject*" "src")
    '("const-char*" "propname1")
    '("GObject*" "dest")
    '("const-char*" "propname2")
    '("guint" "flags")
  )
)

(define-function swami_control_prop_connect_to_control
  (c-name "swami_control_prop_connect_to_control")
  (return-type "none")
  (parameters
    '("GObject*" "src")
    '("const-char*" "propname")
    '("SwamiControl*" "dest")
    '("guint" "flags")
  )
)

(define-method prop_connect_from_control
  (of-object "SwamiControl")
  (c-name "swami_control_prop_connect_from_control")
  (return-type "none")
  (parameters
    '("GObject*" "dest")
    '("const-char*" "propname")
    '("guint" "flags")
  )
)

(define-function swami_control_prop_get_type
  (c-name "swami_control_prop_get_type")
  (return-type "GType")
)

(define-function swami_control_prop_new
  (c-name "swami_control_prop_new")
  (is-constructor-of "SwamiControlProp")
  (return-type "SwamiControlProp*")
  (parameters
    '("GObject*" "object")
    '("GParamSpec*" "pspec")
  )
)

(define-method assign
  (of-object "SwamiControlProp")
  (c-name "swami_control_prop_assign")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("GParamSpec*" "pspec")
    '("gboolean" "send_events")
  )
)

(define-method assign_by_name
  (of-object "SwamiControlProp")
  (c-name "swami_control_prop_assign_by_name")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-char*" "prop_name")
  )
)



;; From SwamiControlQueue.h

(define-function swami_control_queue_get_type
  (c-name "swami_control_queue_get_type")
  (return-type "GType")
)

(define-function swami_control_queue_new
  (c-name "swami_control_queue_new")
  (is-constructor-of "SwamiControlQueue")
  (return-type "SwamiControlQueue*")
)

(define-method add_event
  (of-object "SwamiControlQueue")
  (c-name "swami_control_queue_add_event")
  (return-type "none")
  (parameters
    '("SwamiControl*" "control")
    '("SwamiControlEvent*" "event")
  )
)

(define-method run
  (of-object "SwamiControlQueue")
  (c-name "swami_control_queue_run")
  (return-type "none")
)

(define-method set_test_func
  (of-object "SwamiControlQueue")
  (c-name "swami_control_queue_set_test_func")
  (return-type "none")
  (parameters
    '("SwamiControlQueueTestFunc" "test_func")
  )
)



;; From SwamiControlValue.h

(define-function swami_control_value_get_type
  (c-name "swami_control_value_get_type")
  (return-type "GType")
)

(define-function swami_control_value_new
  (c-name "swami_control_value_new")
  (is-constructor-of "SwamiControlValue")
  (return-type "SwamiControlValue*")
)

(define-method assign_value
  (of-object "SwamiControlValue")
  (c-name "swami_control_value_assign_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("GDestroyNotify" "destroy")
  )
)

(define-method alloc_value
  (of-object "SwamiControlValue")
  (c-name "swami_control_value_alloc_value")
  (return-type "none")
)



;; From SwamiEvent_ipatch.h

(define-function swami_event_item_add_get_type
  (c-name "swami_event_item_add_get_type")
  (return-type "GType")
)

(define-function swami_event_item_remove_get_type
  (c-name "swami_event_item_remove_get_type")
  (return-type "GType")
)

(define-function swami_event_prop_change_get_type
  (c-name "swami_event_prop_change_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "SwamiEventItemAdd")
  (c-name "swami_event_item_add_copy")
  (return-type "SwamiEventItemAdd*")
)

(define-method free
  (of-object "SwamiEventItemAdd")
  (c-name "swami_event_item_add_free")
  (return-type "none")
)

(define-function swami_event_item_remove_new
  (c-name "swami_event_item_remove_new")
  (is-constructor-of "SwamiEventItemRemove")
  (return-type "SwamiEventItemRemove*")
)

(define-method copy
  (of-object "SwamiEventItemRemove")
  (c-name "swami_event_item_remove_copy")
  (return-type "SwamiEventItemRemove*")
)

(define-method free
  (of-object "SwamiEventItemRemove")
  (c-name "swami_event_item_remove_free")
  (return-type "none")
)

(define-function swami_event_prop_change_new
  (c-name "swami_event_prop_change_new")
  (is-constructor-of "SwamiEventPropChange")
  (return-type "SwamiEventPropChange*")
)

(define-method copy
  (of-object "SwamiEventPropChange")
  (c-name "swami_event_prop_change_copy")
  (return-type "SwamiEventPropChange*")
)

(define-method free
  (of-object "SwamiEventPropChange")
  (c-name "swami_event_prop_change_free")
  (return-type "none")
)



;; From SwamiLock.h

(define-function swami_lock_get_type
  (c-name "swami_lock_get_type")
  (return-type "GType")
)

(define-function swami_lock_set_atomic
  (c-name "swami_lock_set_atomic")
  (return-type "none")
  (parameters
    '("gpointer" "lock")
    '("const-char*" "first_property_name")
  )
  (varargs #t)
)

(define-function swami_lock_get_atomic
  (c-name "swami_lock_get_atomic")
  (return-type "none")
  (parameters
    '("gpointer" "lock")
    '("const-char*" "first_property_name")
  )
  (varargs #t)
)



;; From SwamiLog.h

(define-function swami_error_quark
  (c-name "swami_error_quark")
  (return-type "GQuark")
)



;; From SwamiMidiDevice.h

(define-function swami_midi_device_get_type
  (c-name "swami_midi_device_get_type")
  (return-type "GType")
)

(define-method open
  (of-object "SwamiMidiDevice")
  (c-name "swami_midi_device_open")
  (return-type "gboolean")
  (parameters
    '("GError**" "err")
  )
)

(define-method close
  (of-object "SwamiMidiDevice")
  (c-name "swami_midi_device_close")
  (return-type "none")
)

(define-method get_control
  (of-object "SwamiMidiDevice")
  (c-name "swami_midi_device_get_control")
  (return-type "SwamiControl*")
  (parameters
    '("int" "index")
  )
)



;; From SwamiMidiEvent.h

(define-function swami_midi_event_get_type
  (c-name "swami_midi_event_get_type")
  (return-type "GType")
)

(define-function swami_midi_event_new
  (c-name "swami_midi_event_new")
  (is-constructor-of "SwamiMidiEvent")
  (return-type "SwamiMidiEvent*")
)

(define-method free
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_free")
  (return-type "none")
)

(define-method copy
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_copy")
  (return-type "SwamiMidiEvent*")
)

(define-method set
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_set")
  (return-type "none")
  (parameters
    '("SwamiMidiEventType" "type")
    '("int" "channel")
    '("int" "param1")
    '("int" "param2")
  )
)

(define-method note_on
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_note_on")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "note")
    '("int" "velocity")
  )
)

(define-method note_off
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_note_off")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "note")
    '("int" "velocity")
  )
)

(define-method bank_select
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_bank_select")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "bank")
  )
)

(define-method program_change
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_program_change")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "program")
  )
)

(define-method bend_range
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_bend_range")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "cents")
  )
)

(define-method pitch_bend
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_pitch_bend")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "value")
  )
)

(define-method control
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_control")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "ctrlnum")
    '("int" "value")
  )
)

(define-method control14
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_control14")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "ctrlnum")
    '("int" "value")
  )
)

(define-method rpn
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_rpn")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "paramnum")
    '("int" "value")
  )
)

(define-method nrpn
  (of-object "SwamiMidiEvent")
  (c-name "swami_midi_event_nrpn")
  (return-type "none")
  (parameters
    '("int" "channel")
    '("int" "paramnum")
    '("int" "value")
  )
)



;; From SwamiObject.h

(define-function swami_type_set_rank
  (c-name "swami_type_set_rank")
  (return-type "none")
  (parameters
    '("GType" "type")
    '("GType" "group_type")
    '("int" "rank")
  )
)

(define-function swami_type_get_rank
  (c-name "swami_type_get_rank")
  (return-type "int")
  (parameters
    '("GType" "type")
    '("GType" "group_type")
  )
)

(define-function swami_type_get_children
  (c-name "swami_type_get_children")
  (return-type "GType*")
  (parameters
    '("GType" "group_type")
  )
)

(define-function swami_type_get_default
  (c-name "swami_type_get_default")
  (return-type "GType")
  (parameters
    '("GType" "group_type")
  )
)

(define-function swami_object_set_default
  (c-name "swami_object_set_default")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("GType" "type")
  )
)

(define-function swami_object_get_by_name
  (c-name "swami_object_get_by_name")
  (return-type "GObject*")
  (parameters
    '("GObject*" "object")
    '("const-char*" "name")
  )
)

(define-function swami_object_find_by_type
  (c-name "swami_object_find_by_type")
  (return-type "IpatchList*")
  (parameters
    '("GObject*" "object")
    '("const-char*" "type_name")
  )
)

(define-function swami_object_get_by_type
  (c-name "swami_object_get_by_type")
  (return-type "GObject*")
  (parameters
    '("GObject*" "object")
    '("const-char*" "type_name")
  )
)

(define-function swami_object_get_valist
  (c-name "swami_object_get_valist")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-char*" "first_property_name")
    '("va_list" "var_args")
  )
)

(define-function swami_object_get_property
  (c-name "swami_object_get_property")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-char*" "property_name")
    '("GValue*" "value")
  )
)

(define-function swami_object_get
  (c-name "swami_object_get")
  (return-type "none")
  (parameters
    '("gpointer" "object")
    '("const-char*" "first_prop_name")
  )
  (varargs #t)
)

(define-function swami_object_set_valist
  (c-name "swami_object_set_valist")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-char*" "first_property_name")
    '("va_list" "var_args")
  )
)

(define-function swami_object_set_property
  (c-name "swami_object_set_property")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-char*" "property_name")
    '("const-GValue*" "value")
  )
)

(define-function swami_object_set
  (c-name "swami_object_set")
  (return-type "none")
  (parameters
    '("gpointer" "object")
    '("const-char*" "first_prop_name")
  )
  (varargs #t)
)

(define-function swami_find_object_property
  (c-name "swami_find_object_property")
  (return-type "GParamSpec*")
  (parameters
    '("const-char*" "property_name")
  )
)

(define-function swami_list_object_properties
  (c-name "swami_list_object_properties")
  (return-type "GParamSpec**")
  (parameters
    '("guint*" "n_properties")
  )
)

(define-function swami_object_get_flags
  (c-name "swami_object_get_flags")
  (return-type "guint")
  (parameters
    '("GObject*" "object")
  )
)

(define-function swami_object_set_flags
  (c-name "swami_object_set_flags")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("guint" "flags")
  )
)

(define-function swami_object_clear_flags
  (c-name "swami_object_clear_flags")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("guint" "flags")
  )
)

(define-function swami_object_set_origin
  (c-name "swami_object_set_origin")
  (return-type "none")
  (parameters
    '("GObject*" "obj")
    '("GObject*" "origin")
  )
)

(define-function swami_object_get_origin
  (c-name "swami_object_get_origin")
  (return-type "GObject*")
  (parameters
    '("GObject*" "obj")
  )
)



;; From SwamiParam.h

(define-function swami_param_get_limits
  (c-name "swami_param_get_limits")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
    '("gdouble*" "min")
    '("gdouble*" "max")
    '("gdouble*" "def")
    '("gboolean*" "integer")
  )
)

(define-function swami_param_set_limits
  (c-name "swami_param_set_limits")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "def")
  )
)

(define-function swami_param_type_has_limits
  (c-name "swami_param_type_has_limits")
  (return-type "gboolean")
  (parameters
    '("GType" "param_type")
  )
)

(define-function swami_param_convert
  (c-name "swami_param_convert")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "dest")
    '("GParamSpec*" "src")
  )
)

(define-function swami_param_convert_new
  (c-name "swami_param_convert_new")
  (is-constructor-of "SwamiParamConvert")
  (return-type "GParamSpec*")
  (parameters
    '("GParamSpec*" "pspec")
    '("GType" "value_type")
  )
)

(define-function swami_param_type_transformable
  (c-name "swami_param_type_transformable")
  (return-type "gboolean")
  (parameters
    '("GType" "src_type")
    '("GType" "dest_type")
  )
)

(define-function swami_param_type_transformable_value
  (c-name "swami_param_type_transformable_value")
  (return-type "gboolean")
  (parameters
    '("GType" "src_valtype")
    '("GType" "dest_valtype")
  )
)

(define-function swami_param_transform
  (c-name "swami_param_transform")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "dest")
    '("GParamSpec*" "src")
    '("SwamiValueTransform" "trans")
    '("gpointer" "user_data")
  )
)

(define-function swami_param_transform_new
  (c-name "swami_param_transform_new")
  (is-constructor-of "SwamiParamTransform")
  (return-type "GParamSpec*")
  (parameters
    '("GParamSpec*" "dest")
    '("GType" "value_type")
    '("SwamiValueTransform" "trans")
    '("gpointer" "user_data")
  )
)

(define-function swami_param_type_from_value_type
  (c-name "swami_param_type_from_value_type")
  (return-type "GType")
  (parameters
    '("GType" "value_type")
  )
)



;; From SwamiPlugin.h

(define-function swami_plugin_get_type
  (c-name "swami_plugin_get_type")
  (return-type "GType")
)

(define-function swami_plugin_add_path
  (c-name "swami_plugin_add_path")
  (return-type "none")
  (parameters
    '("const-char*" "path")
  )
)

(define-function swami_plugin_load_all
  (c-name "swami_plugin_load_all")
  (return-type "none")
)

(define-function swami_plugin_load
  (c-name "swami_plugin_load")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename")
  )
)

(define-function swami_plugin_load_absolute
  (c-name "swami_plugin_load_absolute")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename")
  )
)

(define-method load_plugin
  (of-object "SwamiPlugin")
  (c-name "swami_plugin_load_plugin")
  (return-type "gboolean")
)

(define-method is_loaded
  (of-object "SwamiPlugin")
  (c-name "swami_plugin_is_loaded")
  (return-type "gboolean")
)

(define-function swami_plugin_find
  (c-name "swami_plugin_find")
  (return-type "SwamiPlugin*")
  (parameters
    '("const-char*" "name")
  )
)

(define-function swami_plugin_get_list
  (c-name "swami_plugin_get_list")
  (return-type "GList*")
)

(define-method save_xml
  (of-object "SwamiPlugin")
  (c-name "swami_plugin_save_xml")
  (return-type "gboolean")
  (parameters
    '("GNode*" "xmlnode")
    '("GError**" "err")
  )
)

(define-method load_xml
  (of-object "SwamiPlugin")
  (c-name "swami_plugin_load_xml")
  (return-type "gboolean")
  (parameters
    '("GNode*" "xmlnode")
    '("GError**" "err")
  )
)



;; From SwamiPropTree.h

(define-function swami_prop_tree_get_type
  (c-name "swami_prop_tree_get_type")
  (return-type "GType")
)

(define-function swami_prop_tree_new
  (c-name "swami_prop_tree_new")
  (is-constructor-of "SwamiPropTree")
  (return-type "SwamiPropTree*")
)

(define-method set_root
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_set_root")
  (return-type "none")
  (parameters
    '("GObject*" "root")
  )
)

(define-method prepend
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_prepend")
  (return-type "none")
  (parameters
    '("GObject*" "parent")
    '("GObject*" "obj")
  )
)

(define-method insert_before
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_insert_before")
  (return-type "none")
  (parameters
    '("GObject*" "parent")
    '("GObject*" "sibling")
    '("GObject*" "obj")
  )
)

(define-method remove
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_remove")
  (return-type "none")
  (parameters
    '("GObject*" "obj")
  )
)

(define-method remove_recursive
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_remove_recursive")
  (return-type "none")
  (parameters
    '("GObject*" "obj")
  )
)

(define-method replace
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_replace")
  (return-type "none")
  (parameters
    '("GObject*" "old")
    '("GObject*" "new")
  )
)

(define-method get_children
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_get_children")
  (return-type "IpatchList*")
  (parameters
    '("GObject*" "obj")
  )
)

(define-method object_get_node
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_object_get_node")
  (return-type "GNode*")
  (parameters
    '("GObject*" "obj")
  )
)

(define-method add_value
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_add_value")
  (return-type "none")
  (parameters
    '("GObject*" "obj")
    '("GType" "prop_type")
    '("const-char*" "prop_name")
    '("SwamiControl*" "control")
  )
)

(define-method remove_value
  (of-object "SwamiPropTree")
  (c-name "swami_prop_tree_remove_value")
  (return-type "none")
  (parameters
    '("GObject*" "obj")
    '("GType" "prop_type")
    '("const-char*" "prop_name")
  )
)



;; From SwamiRoot.h

(define-function swami_root_get_type
  (c-name "swami_root_get_type")
  (return-type "GType")
)

(define-function swami_root_new
  (c-name "swami_root_new")
  (is-constructor-of "SwamiRoot")
  (return-type "SwamiRoot*")
)

(define-function swami_get_root
  (c-name "swami_get_root")
  (return-type "SwamiRoot*")
  (parameters
    '("gpointer" "object")
  )
)

(define-method get_objects
  (of-object "SwamiRoot")
  (c-name "swami_root_get_objects")
  (return-type "IpatchList*")
)

(define-method add_object
  (of-object "SwamiRoot")
  (c-name "swami_root_add_object")
  (return-type "none")
  (parameters
    '("GObject*" "object")
  )
)

(define-method new_object
  (of-object "SwamiRoot")
  (c-name "swami_root_new_object")
  (return-type "GObject*")
  (parameters
    '("const-char*" "type_name")
  )
)

(define-method prepend_object
  (of-object "SwamiRoot")
  (c-name "swami_root_prepend_object")
  (return-type "none")
  (parameters
    '("GObject*" "parent")
    '("GObject*" "object")
  )
)

(define-method insert_object_before
  (of-object "SwamiRoot")
  (c-name "swami_root_insert_object_before")
  (return-type "none")
  (parameters
    '("GObject*" "parent")
    '("GObject*" "sibling")
    '("GObject*" "object")
  )
)

(define-method patch_load
  (of-object "SwamiRoot")
  (c-name "swami_root_patch_load")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename")
    '("IpatchItem**" "item")
    '("GError**" "err")
  )
)

(define-function swami_root_patch_save
  (c-name "swami_root_patch_save")
  (return-type "gboolean")
  (parameters
    '("IpatchItem*" "item")
    '("const-char*" "filename")
    '("GError**" "err")
  )
)



;; From SwamiWavetbl.h

(define-function swami_wavetbl_get_type
  (c-name "swami_wavetbl_get_type")
  (return-type "GType")
)

(define-method get_virtual_bank
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_get_virtual_bank")
  (return-type "IpatchVBank*")
)

(define-method set_active_item_locale
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_set_active_item_locale")
  (return-type "none")
  (parameters
    '("int" "bank")
    '("int" "program")
  )
)

(define-method get_active_item_locale
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_get_active_item_locale")
  (return-type "none")
  (parameters
    '("int*" "bank")
    '("int*" "program")
  )
)

(define-method open
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_open")
  (return-type "gboolean")
  (parameters
    '("GError**" "err")
  )
)

(define-method close
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_close")
  (return-type "none")
)

(define-method get_control
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_get_control")
  (return-type "SwamiControlMidi*")
  (parameters
    '("int" "index")
  )
)

(define-method load_patch
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_load_patch")
  (return-type "gboolean")
  (parameters
    '("IpatchItem*" "patch")
    '("GError**" "err")
  )
)

(define-method load_active_item
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_load_active_item")
  (return-type "gboolean")
  (parameters
    '("IpatchItem*" "item")
    '("GError**" "err")
  )
)

(define-method check_update_item
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_check_update_item")
  (return-type "gboolean")
  (parameters
    '("IpatchItem*" "item")
    '("GParamSpec*" "prop")
  )
)

(define-method update_item
  (of-object "SwamiWavetbl")
  (c-name "swami_wavetbl_update_item")
  (return-type "none")
  (parameters
    '("IpatchItem*" "item")
  )
)



;; From builtin_enums.h

(define-function swami_control_flags_get_type
  (c-name "swami_control_flags_get_type")
  (return-type "GType")
)

(define-function swami_control_conn_priority_get_type
  (c-name "swami_control_conn_priority_get_type")
  (return-type "GType")
)

(define-function swami_control_conn_flags_get_type
  (c-name "swami_control_conn_flags_get_type")
  (return-type "GType")
)

(define-function swami_error_get_type
  (c-name "swami_error_get_type")
  (return-type "GType")
)

(define-function swami_midi_event_type_get_type
  (c-name "swami_midi_event_type_get_type")
  (return-type "GType")
)

(define-function swami_rank_get_type
  (c-name "swami_rank_get_type")
  (return-type "GType")
)

(define-function swami_object_flags_get_type
  (c-name "swami_object_flags_get_type")
  (return-type "GType")
)



;; From util.h

(define-function swami_util_get_child_types
  (c-name "swami_util_get_child_types")
  (return-type "GType*")
  (parameters
    '("GType" "type")
    '("guint*" "n_types")
  )
)

(define-function swami_util_new_value
  (c-name "swami_util_new_value")
  (return-type "GValue*")
)

(define-function swami_util_free_value
  (c-name "swami_util_free_value")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-function swami_util_midi_note_to_str
  (c-name "swami_util_midi_note_to_str")
  (return-type "none")
  (parameters
    '("int" "note")
    '("char*" "str")
  )
)

(define-function swami_util_midi_str_to_note
  (c-name "swami_util_midi_str_to_note")
  (return-type "int")
  (parameters
    '("const-char*" "str")
  )
)



;; From version.h

(define-function swami_version
  (c-name "swami_version")
  (return-type "none")
  (parameters
    '("guint*" "major")
    '("guint*" "minor")
    '("guint*" "micro")
  )
)


